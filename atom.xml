<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>入门级菜鸡的自虐笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-04T17:52:16.195Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xyr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Educational Codeforces Round 41 C</title>
    <link href="http://yoursite.com/2018/04/05/Educational%20Codeforces%20Round%2041%20C/"/>
    <id>http://yoursite.com/2018/04/05/Educational Codeforces Round 41 C/</id>
    <published>2018-04-04T17:10:10.000Z</published>
    <updated>2018-04-04T17:52:16.195Z</updated>
    
    <content type="html"><![CDATA[<p>C. Chessboard<br>time limit per test1 second<br>memory limit per test256 megabytes<br>inputstandard input<br>outputstandard output<br>Magnus decided to play a classic chess game. Though what he saw in his locker shocked him! His favourite chessboard got broken into 4 pieces, each of size n by n, n is always odd. And what’s even worse, some squares were of wrong color. j-th square of the i-th row of k-th piece of the board has color ak, i, j; 1 being black and 0 being white.</p><p>Now Magnus wants to change color of some squares in such a way that he recolors minimum number of squares and obtained pieces form a valid chessboard. Every square has its color different to each of the neightbouring by side squares in a valid board. Its size should be 2n by 2n. You are allowed to move pieces but not allowed to rotate or flip them.</p><p>Input<br>The first line contains odd integer n (1 ≤ n ≤ 100) — the size of all pieces of the board.</p><p>Then 4 segments follow, each describes one piece of the board. Each consists of n lines of n characters; j-th one of i-th line is equal to 1 if the square is black initially and 0 otherwise. Segments are separated by an empty line.</p><p>Output<br>Print one number — minimum number of squares Magnus should recolor to be able to obtain a valid chessboard.<br>Examples<br>input<br>1<br>0</p><p>0</p><p>1</p><p>0<br>output<br>1<br>input<br>3<br>101<br>010<br>101</p><p>101<br>000<br>101</p><p>010<br>101<br>011</p><p>010<br>101<br>010<br>output<br>2<br>题意很简单，有4块n*n棋盘。其中有些棋盘的配色不标准，问至少需要重新染色多少块才能使它们组成成一块完整的2n*2n的棋盘。（n为奇数）</p><p>数据不算大，很容易想到这种暴力模拟的思路，但是当时做的时候没想到如何把每种排列情况全列出来。赛后看榜单上的代码才知道了有一个叫next_permutation()的全排列函数。<br>            next_permutation()会取得[first,last)所标示之序列的下一个排列组合，如果没有下一个排列组合，便返回false;否则返回true。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int INF = 0x3f3f3f3f;</div><div class="line"></div><div class="line">char <span class="keyword">in</span>[4][105][105];</div><div class="line">char cur[205][205];</div><div class="line"></div><div class="line">int now[4];</div><div class="line">int <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">int n,minn=1e9,ans;</div><div class="line">char ch;</div><div class="line">scanf(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(int i=0;i&lt;4;i++)</div><div class="line">        <span class="keyword">for</span> (int j=0;j&lt;n;j++)</div><div class="line">            scanf(<span class="string">"%s"</span>,<span class="keyword">in</span>[i][j]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (int i=0;i&lt;4;i++)now[i]=i;</div><div class="line"></div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        ans=0;</div><div class="line">        <span class="keyword">for</span>(int i=0;i&lt;4;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(int j=0;j&lt;n;j++)&#123;</div><div class="line">                <span class="keyword">for</span>(int k=0;k&lt;n;k++)&#123;</div><div class="line">                    cur[(i/2)*n+j][(i%2)*n+k]=<span class="keyword">in</span>[now[i]][j][k];//拼成新的棋盘</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(int i=0;i&lt;2*n;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(int j=0;j&lt;2*n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>((i+j)%2)ch=<span class="string">'0'</span>;//黑白相间的棋盘颜色</div><div class="line">                <span class="keyword">else</span> ch=<span class="string">'1'</span>;</div><div class="line">                <span class="keyword">if</span>(ch!=cur[i][j])ans++;//每种情况需要颜色次数</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        minn=min(minn,ans);</div><div class="line"></div><div class="line">    &#125;<span class="keyword">while</span>(next_permutation(now,now+4));//把棋盘摆放顺序全排列，遍历所有摆放情况。</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,minn);</div><div class="line"><span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C. Chessboard&lt;br&gt;time limit per test1 second&lt;br&gt;memory limit per test256 megabytes&lt;br&gt;inputstandard input&lt;br&gt;outputstandard output&lt;br&gt;Mag
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="库函数" scheme="http://yoursite.com/tags/%E5%BA%93%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Gym - 101755C</title>
    <link href="http://yoursite.com/2018/03/30/Gym-101755C/"/>
    <id>http://yoursite.com/2018/03/30/Gym-101755C/</id>
    <published>2018-03-30T13:31:23.000Z</published>
    <updated>2018-04-04T17:17:43.292Z</updated>
    
    <content type="html"><![CDATA[<p>Problem C. Third-Party Software</p><p>Time limit: 2 seconds<br>Memory limit: 256 megabytes<br>Pavel is developing a game. To do that, he needs functions available in a third-party library too famous to be called. It is known that the function i first appeared in version ai and existed until version bi , and starting from the version bi + 1, it is absent in this library.<br>The library is not free and Pavel needs all the functions. Which minimal number of versions he need to purchase to be able to use all the functions?</p><p>Input<br>The first line contains a single integer n (1 ≤ n ≤ 200000) — the number of the functions.<br>Each of the next n lines contains two integers ai and bi (1 ≤ ai ≤ bi ≤ 109<br>) — the interval of library<br>versions where function i was available.</p><p>Output<br>In the first line output a single integer k — the minimal number of library versions need to be purchased<br>to unlock all functions.<br>In the second line output k distinct integers — the numbers of versions need to be purchased.<br>If there are several possible answers, output any of them.</p><p>Example<br>standard input<br>5<br>2 4<br>1 3<br>2 3<br>3 6<br>4 5<br>standard output<br>2<br>3 4</p><p>题意很简单，就是一种东西有很多个版本和很多个功能。但是每个功能仅存在于连续的几个版本中。<br>现在给出n个功能的存在情况，问至少要买那几个版本才能实现所有功能。</p><p>先按照各个功能的r从小到大排序，同时把l作为第二标准从小到大排序。这样买版本r就可以买到尽可能多的功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">struct U&#123;</div><div class="line">    int l,r;</div><div class="line">    bool operator &lt; (const U&amp;x)const&#123;</div><div class="line">        <span class="keyword">if</span>(r==x.r)<span class="built_in">return</span> l&lt;x.l;</div><div class="line">        <span class="built_in">return</span> r&lt;x.r;</div><div class="line">    &#125;</div><div class="line">&#125;a[200020];</div><div class="line">vector &lt;int&gt; ans;</div><div class="line"></div><div class="line">int <span class="function"><span class="title">main</span></span>()&#123;</div><div class="line">    int n;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(int i=0;i&lt;n;i++)&#123;</div><div class="line">        scanf(<span class="string">"%d%d"</span>,&amp;a[i].l,&amp;a[i].r);</div><div class="line">    &#125;</div><div class="line">    int maxx=-1;</div><div class="line">    sort(a,a+n);</div><div class="line">    <span class="keyword">for</span>(int i=0;i&lt;n;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i].l&gt;maxx)&#123;</div><div class="line">        /*排序后有，若li&gt;购买到的r的最大值。证明已购买的版本不能覆盖功能i。所以购买i并更新最大值*/</div><div class="line">            ans.push_back(a[i].r);</div><div class="line">            maxx=max(maxx,a[i].r);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans.size());</div><div class="line">    <span class="keyword">for</span>(int i=0;i&lt;ans.size();i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Problem C. Third-Party Software&lt;/p&gt;
&lt;p&gt;Time limit: 2 seconds&lt;br&gt;Memory limit: 256 megabytes&lt;br&gt;Pavel is developing a game. To do that, he
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>python入门笔记</title>
    <link href="http://yoursite.com/2017/11/23/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/23/python入门笔记/</id>
    <published>2017-11-22T16:23:44.000Z</published>
    <updated>2018-01-10T15:40:35.078Z</updated>
    
    <content type="html"><![CDATA[<p>Python笔记//参考廖雪峰教程<br>Python用缩进定义语句块</p><p>变量<br>1.不用声明<br>2.空值为none 0不是空值<br>3.变量本身不限定类型<br>4.Python没有机制保证某变量不被改变<br>5.运算/的结果一定是浮点型，//结果为整数<br>6.支持中文字符</p><p>注释</p><p>#单行注释<br>‘’’多行注释’’’<br>输出print(‘XXX’)<br>1.支持多个字符串输出，用’,’隔开<br>2.print输出时遇到字符串间的’,’会留出空格<br>3.’***‘后可以接*a意思为吧相应字符串输出a次<br>输出print(‘XXX’)<br>4.字符串前加r例如r’***‘字符串内部不转义<br>5.支持内部用’’’…’’’表示多行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">''</span><span class="string">'line1</span></div><div class="line"><span class="string">... line2</span></div><div class="line"><span class="string">... line3'</span><span class="string">''</span>)</div><div class="line">line1</div><div class="line">line2</div><div class="line">line3</div><div class="line">写成py后为</div><div class="line"><span class="built_in">print</span>(<span class="string">''</span><span class="string">'line1</span></div><div class="line"><span class="string">line2</span></div><div class="line"><span class="string">line3'</span><span class="string">''</span>)</div></pre></td></tr></table></figure></p><p>6.格式化输出通过%实现</p><pre><code>&gt;&gt;&gt; &apos;Hi, %s, you have $%d.&apos; % (&apos;Michael&apos;, 1000000)</code></pre><p>%s会把所有类型转成字符串类型<br><img src="/2017/11/23/python入门笔记/格式化输出.jpg" alt="1"></p><p>输入<br>1.***为执行时会显示的语句a为输入的字符串<br>2.输入数字可以用a=int(a)进行类型转换</p><p>选择结构<br>if 表达式1: 语句1<br>elif 表达式2: 语句2<br>else :语句3</p><p>循环控制<br>for I in range(n):<br>    循环体<br>while 条件表达式:<br>    循环体</p><p>list类型(列表类似于一种可变长的C语言数组)<br>a=[‘zcs’,123,214,p,]<br>p=<a href="注意list括号为[]">1,2</a><br>1.可以随意增强元素，读取元素方式与数组类似<br>2.通过len()函数可以获得长度<br>3.可以通过维数-1～-4访问列表倒数1到4元素<br>4.通过x.insert(n,m)可以在位置n插入元素m<br>5.a.remove()根据引用类型删除一个指定的元素<br>6.列表内元素可以为不同类型(包括list类型)<br>7.常用操作a.append()    a.sort()a.pop()    </p><p>tuple类型(当序列声明括号为()是得到的为tuple类型)<br>1.tuple声明后不能改变元素，可以改变相对应的值<br>dict类型(字典或映射类似于map，根据一个元素得到一个相应的被映射元素)(f(x)=x为原象，f(x)为象)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;<span class="string">'Michael'</span>: 95, <span class="string">'Bob'</span>: 75, <span class="string">'Tracy'</span>: 85&#125;</div><div class="line">&gt;&gt;&gt; d[<span class="string">'Michael'</span>]</div><div class="line">95</div></pre></td></tr></table></figure></p><p>1.查找方式不是遍历，所以无论dict有多长运行速度不会变慢<br><img src="/2017/11/23/python入门笔记/dict查找原理.jpg" alt="2"><br>2.一个元素只能映射出一个元素，否则后一个会覆盖前一个象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d[<span class="string">'Jack'</span>] = 90</div><div class="line">&gt;&gt;&gt; d[<span class="string">'Jack'</span>]</div><div class="line">90</div><div class="line">&gt;&gt;&gt; d[<span class="string">'Jack'</span>] = 88</div><div class="line">&gt;&gt;&gt; d[<span class="string">'Jack'</span>]</div><div class="line">88</div></pre></td></tr></table></figure></p><p>3.若原象不存在，dict就会报错;<br>4.可通过‘in’判断原象是否存在<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="string">'Thomas'</span> <span class="keyword">in</span> d</div><div class="line">False</div></pre></td></tr></table></figure></p><p>5.亦可通过dict提供的get()方法判断原象是否存在。如果原象不存在，可以返回None，或者自己添加象和原象:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d.get(<span class="string">'Thomas'</span>)</div><div class="line">&gt;&gt;&gt; d.get(<span class="string">'Thomas'</span>, -1)</div><div class="line">-1</div></pre></td></tr></table></figure></p><p>6.通过pop(原象)可删除原象和相对应的象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d.pop(<span class="string">'Bob'</span>)</div><div class="line">75</div><div class="line">&gt;&gt;&gt; d</div><div class="line">&#123;<span class="string">'Michael'</span>: 95, <span class="string">'Tracy'</span>: 85&#125;</div></pre></td></tr></table></figure></p><p>7.dict内部无序</p><p>set类型(集合)<br>1.不能有相同元素<br>2.通过a.add(b)可以添加元素b到集合a中<br>3.通过a.remove(b)方法可以删除a中的元素b<br>4.&amp;求交集|求并集<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s1 = <span class="built_in">set</span>([1, 2, 3])</div><div class="line">&gt;&gt;&gt; s2 = <span class="built_in">set</span>([2, 3, 4])</div><div class="line">&gt;&gt;&gt; s1 &amp; s2</div><div class="line">&#123;2, 3&#125;</div><div class="line">&gt;&gt;&gt; s1 | s2</div><div class="line">&#123;1, 2, 3, 4&#125;</div></pre></td></tr></table></figure></p><p>不可变对象<br><img src="/2017/11/23/python入门笔记/不可变对象.jpg" alt="3"><br>运算符<br>1.与或非and or not<br>2.幂运算 **<br>3.不等于 &lt;&gt; or !=</p><p>函数<br>1.函数定义(无定义返回值类型)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def 函数名(参数列表):</div><div class="line">函数</div><div class="line"><span class="built_in">return</span>（没有<span class="built_in">return</span>语句解释为<span class="built_in">return</span> NULL）</div></pre></td></tr></table></figure></p><p>2.函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">3.导入文件中函数：在文件目录中启动解释器，用“from x import y”启用文件x中的y函数。（x不含后缀名）</div><div class="line">4.空函数一定要用占位符pass才能使代码运行，否则会有语法错误（其他语句同理）。</div><div class="line">5.调用函数时若发生参数类型错误，会报&apos;TypeError&apos;，并给出错误信息：</div><div class="line">```bash</div><div class="line">&gt;&gt;&gt; abs(&apos;a&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: bad operand type for abs(): &apos;str&apos;</div></pre></td></tr></table></figure></p><p>6.调用函数时若发生参数个数错误，会报’TypeError’，并给出错误信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; my_abs(1, 2)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: my_abs() takes 1 positional argument but 2 were given</div></pre></td></tr></table></figure></p><p>7.数据类型转换函数“数据类型（参数）”&gt;&gt;&gt;int(‘123’),与C语言中“（数据类型）参数”区分。<br>8.在函数内可使用isinstance()检测变量类型是否符合期望类型。其中isinstance()有两个参数。第一个参数为需要检测的变量，第二个参数为符合要求的数据类型。（可以包含多个，需要用括号括起来）<br>9.python中函数返回值可以有个，但实际上返回的是一个tuple类型，但可以用多个变量同时接受一个tuple<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span>(x, y)</div><div class="line">151.96152422706632 70.0</div><div class="line">&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span>(r)</div><div class="line">(151.96152422706632, 70.0)</div></pre></td></tr></table></figure></p><p>10.python函数支持把参数初始化，即给参数赋一个默认值，使之能在调用时可以输入少几个个值，直接用默认值运行函数，便于使用。（初始化的参数需要放在后面）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def power(x, n=2):</div><div class="line">    s = 1</div><div class="line">    <span class="keyword">while</span> n &gt; 0:</div><div class="line">        n = n - 1</div><div class="line">        s = s * x</div><div class="line">    <span class="built_in">return</span> s</div><div class="line">此时power(5)等价于 power(5,2)</div></pre></td></tr></table></figure></p><p>11.定义默认参数要牢记一点：默认参数必须指向不变对象！例如常数。否侧在调用过程中，默认值会发生改变。是两次调用结果不同。同理我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。<br>12.python的函数可以实现变个数参数传入调用函数<br>（1）通过tuple实现：可变参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def calc(*numbers):</div><div class="line">    sum = 0</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="built_in">return</span> sum </div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line"><span class="string">    实现a^2+b^2+c^2+....</span></div><div class="line"><span class="string">    其中\*numbers是一个tuple</span></div><div class="line"><span class="string">    for n in numbers:</span></div><div class="line"><span class="string">    意思是把tuple的内容遍历一遍</span></div><div class="line"><span class="string">    并分别赋值给n</span></div><div class="line"><span class="string">    '</span><span class="string">''</span></div></pre></td></tr></table></figure></p><p>（2）通过dict实现：关键字参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def person(name, age, **kw):</div><div class="line"><span class="built_in">print</span>(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div><div class="line">&gt;&gt;&gt; person(<span class="string">'Bob'</span>, 35, city=<span class="string">'Beijing'</span>)</div><div class="line">name: Bob age: 35 other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</div><div class="line">&gt;&gt;&gt; person(<span class="string">'Adam'</span>, 45, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line">name: Adam age: 45 other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line"><span class="string">**kw为关键字变量</span></div><div class="line"><span class="string">传入函数后变成dict类型，注意传入方式a=b——&gt;&#123;a:b&#125;</span></div><div class="line"><span class="string">'</span><span class="string">''</span></div></pre></td></tr></table></figure></p><p>关键词参数可以通过命名关键词参数限制关键词的名字。例如，只接收city和job作为关键字参数。这种方式定义的函数如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">def person(name, age, *, city, job):</div><div class="line">   <span class="built_in">print</span>(name, age, city, job)</div><div class="line">   &gt;&gt;&gt; person(<span class="string">'Jack'</span>, 24, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line">Jack 24 Beijing Engineer</div><div class="line">   <span class="string">''</span><span class="string">'和关键字参数**kw不同，</span></div><div class="line"><span class="string">   命名关键字参数需要一个特殊分隔符*，</span></div><div class="line"><span class="string">   *后面的参数被视为命名关键字参数。</span></div><div class="line"><span class="string">   命名关键字参数必须传入参数名，这和未知参数不同。</span></div><div class="line"><span class="string">   （若命名关键字参数已经初始化，则可以忽略不掺入）</span></div><div class="line"><span class="string">   def person(name, age, *, city='</span>Beijing<span class="string">', job):</span></div><div class="line"><span class="string">   print(name, age, city, job)</span></div><div class="line"><span class="string">   &gt;&gt;&gt; person('</span>Jack<span class="string">', 24, job='</span>Engineer<span class="string">')</span></div><div class="line"><span class="string">Jack 24 Beijing Engineer</span></div><div class="line"><span class="string">   如果没有传入参数名，调用将报错：</span></div><div class="line"><span class="string">   若函数定义中命名关键字参数前面已有可变参数，那么命名关键字参数的*可以省略</span></div><div class="line"><span class="string">   '</span><span class="string">''</span></div></pre></td></tr></table></figure></p><p>13.在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p><p>查找异常<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">捕捉异常的代码范围</div><div class="line">except Exception as e:</div><div class="line"><span class="built_in">print</span>(e)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">没有捕捉到异常</div><div class="line">Finally:</div><div class="line">始终执行这段代码</div></pre></td></tr></table></figure></p><p>标准库的文件处理<br>    open(“文件路径”，””)<br>    第二个参数为r，w或+，表示程序权限为只读，只写或读写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python笔记//参考廖雪峰教程&lt;br&gt;Python用缩进定义语句块&lt;/p&gt;
&lt;p&gt;变量&lt;br&gt;1.不用声明&lt;br&gt;2.空值为none 0不是空值&lt;br&gt;3.变量本身不限定类型&lt;br&gt;4.Python没有机制保证某变量不被改变&lt;br&gt;5.运算/的结果一定是浮点型，//结果
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2017哈理工华为杯G题</title>
    <link href="http://yoursite.com/2017/11/22/2017%E5%93%88%E7%90%86%E5%B7%A5%E5%8D%8E%E4%B8%BA%E6%9D%AFG%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/22/2017哈理工华为杯G题/</id>
    <published>2017-11-21T16:21:20.000Z</published>
    <updated>2017-11-22T05:19:08.812Z</updated>
    
    <content type="html"><![CDATA[<p>G.真假小妖 </p><p>Time Limit: 1000 MS Memory Limit: 256000 K </p><p>Total Submit: 1236 (482 users)  Total Accepted: 425 (387 users)  Special Judge: No  </p><p>Description </p><p>风和日丽的一天，涂山小八正在悠哉的晒着太阳。突然，一群小妖涌了进来，一问才知道又是东方平平捉弄她，使了个法术造了一群涂山小妖的盗版。现在分不清真小妖和假小妖了。 </p><p>小八微微一笑，开始有条有理的组织起来鉴别真假。原来涂山小妖都有一个ID数字，这些ID数字都是特别的回文数字。平平不知道此事，造的假小妖的ID数字都不是回文数字。 </p><p>看在小八都这么机智的份上，帮帮她吧？ </p><p>Input<br>   输入数据有多组，每组占一行，输入一个整数n(1≤n≤109)，表示小妖的ID数字。<br>Output </p><p>对于每组数据，如果这个小妖是真小妖的话，输出“yes”，否则输出“no”（输出不包括引号），每组输出占一行。 </p><p>Sample Input<br>12345<br>12321<br>2<br>Sample Output<br>no<br>yes<br>yes </p><p>这题就没什么好讲的了，n(1≤n≤109)意味着如果用字符串储存的话一个ID才9个字符直接暴力枚举行了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></div><div class="line">char a[1010][1010],b[1010][1010],fanli[1010][1010];</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int i,n,k=1;</div><div class="line">    char a[20];</div><div class="line">    <span class="keyword">while</span>(~scanf(<span class="string">"%s"</span>,a))</div><div class="line">    &#123;</div><div class="line">        k=1;</div><div class="line">        <span class="keyword">for</span>(i=0,n=strlen(a);i&lt;n-1-i;i++)</div><div class="line">            <span class="keyword">if</span>(a[i]!=a[n-1-i])&#123;k=0;<span class="built_in">break</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(k)<span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>代码大概这样吧，刚打的，源码删了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;G.真假小妖 &lt;/p&gt;
&lt;p&gt;Time Limit: 1000 MS Memory Limit: 256000 K &lt;/p&gt;
&lt;p&gt;Total Submit: 1236 (482 users)  Total Accepted: 425 (387 users)  Specia
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>2017哈理工华为杯J题</title>
    <link href="http://yoursite.com/2017/11/19/2017%E5%93%88%E7%90%86%E5%B7%A5%E5%8D%8E%E4%B8%BA%E6%9D%AFJ%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/19/2017哈理工华为杯J题/</id>
    <published>2017-11-19T06:49:18.000Z</published>
    <updated>2017-11-22T05:15:14.991Z</updated>
    
    <content type="html"><![CDATA[<p>J.递归画图 </p><p>Time Limit: 1000 MS Memory Limit: 256000 K </p><p>Total Submit: 149 (47 users)  Total Accepted: 32 (27 users)  Special Judge: No  </p><p>Description </p><p>递归图形是一类非常有意思的图形，今天介绍其中一种，点阵递归图（这个名字其实是随便起的）。点阵递归图有如下特点： </p><p>第一层若是：</p><p><img src="/2017/11/19/2017哈理工华为杯J题/1.png" alt="1"><br>第二层即为：<br><img src="/2017/11/19/2017哈理工华为杯J题/2.png" alt="2"><br>Input </p><p>输入数据有多组，第一行输入两个正整数a，b（a^b＜1000），表示边长为a的正方形第一层图形，b表示将要输出的b层图形，接下来是a行字符串，每行字符串包含a个字符，字符为空格或* 。<br>Output </p><p>对于每组数据输出一个图形，每组输出后跟随一个空行。 </p><p>Sample Input<br><img src="/2017/11/19/2017哈理工华为杯J题/3.png" alt="3"><br>Sample Output<br><img src="/2017/11/19/2017哈理工华为杯J题/4.png" alt="4"></p><p> 到这里题面就结束了。看起来这道题并不难，只要用二维数组把字符串存起来，一直逐行扩张字符串并覆盖到原来数组就可以实现。<br> 但是有一点比较坑的地方（可能只是我比较菜没看出来）。题目所给的两个范例都是最简单的2层扩张，我们只能通过范例了解到第n层是以第（n-1）层为单位通过某一层中<em>* 的位置为坐标打印出来。但是通过例子我们不能知道作为参考的是那一层（第一层或者第（n-1）层）。一开始我也是踩坑了，幸好提交前及时发现避免了罚时，但是由于思路的重新整理还是花费了不少时间。<br> 在提交前我自己打印了一下，a=3 b=3的情况发现边长已经是81了，如果按照原来我所设置的1010</em>1010的数组一下子就被爆掉了。然后我开始重新审题，发现了这么一行东西<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a，b（a^b＜1000）</div></pre></td></tr></table></figure></p><p> 假设这个数不是乱写的，而是出题人的一个提示。<br>     那么我们可以得知的是每次扩张边长变为a倍，而不是乘以自身。所以作为参考对象的是第一层而不是第（n-1）层。<br> 那么，剩下的就不是什么难题了。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></div><div class="line">char a[1010][1010],b[1010][1010],fanli[1010][1010];</div><div class="line">//在main内声明会爆栈</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n,m,i,j,x,y,c,d,fn;</div><div class="line">    <span class="keyword">while</span>(~scanf(<span class="string">"%d %d"</span>,&amp;n,&amp;m))//n=a,m=b</div><div class="line">    &#123;</div><div class="line">        memset(b,0,sizeof(b));</div><div class="line">        fn=n;</div><div class="line">        getchar();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(i=0;i&lt;n;i++)</div><div class="line">        gets(fanli[i]);//输入字符串</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(i=0;i&lt;n;i++)</div><div class="line">        strcpy(a[i],fanli[i]);//把参考对象保护起来</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(--m)</div><div class="line">        &#123;</div><div class="line">            c=0,d=0;</div><div class="line">            <span class="keyword">for</span>(i=0;i&lt;fn;i++)//对范例逐行扫描</div><div class="line">                <span class="keyword">for</span>(x=0;x&lt;n;x++)//对第（n-1）层逐行复制</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">for</span>(j=0;j&lt;fn;j++)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span>(fanli[i][j]==<span class="string">'*'</span>)</div><div class="line">                            <span class="keyword">for</span>(y=0;y&lt;n;y++)</div><div class="line">                                b[c][d++]=a[x][y];</div><div class="line"></div><div class="line">                        <span class="keyword">if</span>(fanli[i][j]==<span class="string">' '</span>)</div><div class="line">                        <span class="keyword">for</span>(y=0;y&lt;n;y++)</div><div class="line">                                b[c][d++]=<span class="string">' '</span>;</div><div class="line">                    &#125;</div><div class="line">                    c++,d=0;</div><div class="line">                &#125;</div><div class="line">             n=c;</div><div class="line">             <span class="keyword">for</span>(i=0;i&lt;n;i++)</div><div class="line">             strcpy(a[i],b[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(i=0;i&lt;n;i++)</div><div class="line">           <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a[i]);</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);//空出一行</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;J.递归画图 &lt;/p&gt;
&lt;p&gt;Time Limit: 1000 MS Memory Limit: 256000 K &lt;/p&gt;
&lt;p&gt;Total Submit: 149 (47 users)  Total Accepted: 32 (27 users)  Special Ju
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="http://yoursite.com/2017/11/17/%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/17/算法/</id>
    <published>2017-11-17T15:55:36.000Z</published>
    <updated>2017-11-29T09:09:33.071Z</updated>
    
    <content type="html"><![CDATA[<p>1.弗洛伊德求最短路：<br>例题：hdu1874<br><img src="/2017/11/17/算法/弗洛伊德应用.jpg" alt="1"></p><p>2.快速幂<br>例题：hdu汉诺塔V<br>原理：x^2n = x^n <em> x^n;x^2n+1 = x^n </em> x^n * x<br>下面是ans为a^b的模版<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int ans = 1;</div><div class="line">//a=a%c; </div><div class="line"><span class="keyword">while</span>(b&gt;0) </div><div class="line">&#123; </div><div class="line"><span class="keyword">if</span>(b % 2 == 1)  </div><div class="line">ans = (ans * a) ;//% c;最后两次循环为2/2=1;1/2=0 </div><div class="line">b = b/2;  </div><div class="line">a = (a * a) //% c;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>扩展应用快速幂求膜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.弗洛伊德求最短路：&lt;br&gt;例题：hdu1874&lt;br&gt;&lt;img src=&quot;/2017/11/17/算法/弗洛伊德应用.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.快速幂&lt;br&gt;例题：hdu汉诺塔V&lt;br&gt;原理：x^2n = x^n &lt;em&gt; x^n;x^2n+1 = 
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数学常识</title>
    <link href="http://yoursite.com/2017/11/03/%E6%95%B0%E5%AD%A6%E5%B8%B8%E8%AF%86/"/>
    <id>http://yoursite.com/2017/11/03/数学常识/</id>
    <published>2017-11-03T14:34:50.000Z</published>
    <updated>2017-11-12T02:33:54.116Z</updated>
    
    <content type="html"><![CDATA[<ol><li>最小公倍数求法：<br> 假设A与B的最小公倍数是X，最大公因数是Y。则有X=A*B/Y；<br> 且一串数字Xn的最小公倍数为X1与X2和最小公倍数和X3的最小公倍数以此类推。</li><li>最大公因数求法：辗转相除法<br> 设两数为a、b(a≥b)，求a和b最大公因数的步骤如下：<br> (1)用a除以b；<br> (2)若a%b！=0，可得a=max（b，a%b），b=min(b，a%b).<pre><code>重复以上步骤直至a%b==0，此时b为最大公因数；</code></pre><img src="/2017/11/03/数学常识/辗转相除法.png" alt="1"><br>#2017/11/7更新</li><li>求三角形面积：例题hdu2035<br><img src="/2017/11/03/数学常识/流下了没有技术的眼泪.jpg" alt="流下了没有技术的眼泪"><br> 补充概念叉乘：假如对向量a、b、c满足c=a×b。即有c垂直于a、b所在平面，且|c|=|a|<em>|b|</em>sinθ<br><img src="/2017/11/03/数学常识/叉乘视图.jpg" alt="2"><br> 此时又由高中知识可知SΔ=|a|<em> |b|</em> sinθ，所以两向量叉乘的结果是一条膜为两向量首尾相接后所围成三角形面积的ab所在平面的法向量。同理可用多个三角形拼接的方式求已知顶点坐标的多边形面积。<br> 叉乘坐标运算：已知i(a,b,c)、j(x,y,z)时，<pre><code>   有i×j=(bz-cy,-(az-cx),ay-bx).其中当i、j为平面向量是有c=y=0，此时i×j=(0,az-cx,0)。</code></pre>#2017/11/12更新</li><li>错排：<br> 每人对应一个编号，每人只能抽一次，每个编号只有一个。求每一个人抽到自己编号的情况有多少种？（递推公式D(n) = (n-1) [D(n-2) + D(n-1)]）<br> 设：当有x人时有D(n)种情况，此时第一个人有n-1种情况可以选择。假设第一人选的是编号k，此时k有两种情况<pre><code>（1）选择第一个人的编号，相当于剩下的n-2人重新抽取编号，此时情况为D(n-2)；（2）不选择第一个人的编号，相当于k以第一个人的编号为自己的编号剩下的n-1人重新抽取编号，此时情况为D(n--1)；</code></pre> 综上，对n人有D(n) = (n-1) [D(n-2) + D(n-1)]</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;最小公倍数求法：&lt;br&gt; 假设A与B的最小公倍数是X，最大公因数是Y。则有X=A*B/Y；&lt;br&gt; 且一串数字Xn的最小公倍数为X1与X2和最小公倍数和X3的最小公倍数以此类推。&lt;/li&gt;
&lt;li&gt;最大公因数求法：辗转相除法&lt;br&gt; 设两数为a、b(a≥b)，求
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="数学常识" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>ACM常见陷阱</title>
    <link href="http://yoursite.com/2017/11/03/ACM%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1/"/>
    <id>http://yoursite.com/2017/11/03/ACM常见陷阱/</id>
    <published>2017-11-03T09:24:10.000Z</published>
    <updated>2017-11-03T09:46:23.989Z</updated>
    
    <content type="html"><![CDATA[<p>1.scanf输入陷阱//例题hdu2024<br>c中利用scanf()函数输入字符串，在按下回车后’\n’字符是被存储在了缓存区的，如果下一次继续读入字符这个换行符可能会产生影响。<br>一般而言，这个换行符不会带来影响因为在下一个scanf函数会自动跳过空白字符。但是当下一次读取的是%c字符或者用gets等检测每一个字符的输入函数输入时，第二个输入函数就会被\n直接占用并跳到下一步。<br>解决方案：在scanf函数后加一个getchar()函数；先一步把\n读取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.scanf输入陷阱//例题hdu2024&lt;br&gt;c中利用scanf()函数输入字符串，在按下回车后’\n’字符是被存储在了缓存区的，如果下一次继续读入字符这个换行符可能会产生影响。&lt;br&gt;一般而言，这个换行符不会带来影响因为在下一个scanf函数会自动跳过空白字符。但是
      
    
    </summary>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>未来科技大会</title>
    <link href="http://yoursite.com/2017/11/02/%E6%9C%AA%E6%9D%A5%E7%A7%91%E6%8A%80%E5%A4%A7%E4%BC%9A/"/>
    <id>http://yoursite.com/2017/11/02/未来科技大会/</id>
    <published>2017-11-02T10:58:34.000Z</published>
    <updated>2017-11-02T11:48:21.164Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我参加了全球未来科技大会的人工智能论坛。一开始，我对人工智能的概念只是一知半解。而且根本分不清什么是智能和自动化。<br><img src="/2017/11/02/未来科技大会/2.jpg" alt="1"><br>在这次论坛中提出了两个我认为比较对我来说比较新颖的论点：<br>1.伪人工智能；<br>2.人工智能的作用。<br>一位演讲者提出了现在的AI方向的工作者做的并不止AI的观点，因为他认为现有的大多数人工智能只实现了自动化或者通过人类手动写入所有相关运行算法实现的人工➕智能并不能像Alphago那样实现深度学习的能力。确实能否学习自我进步才是区分是否智能的标准。<br><img src="/2017/11/02/未来科技大会/3.jpg" alt="2"><br><img src="/2017/11/02/未来科技大会/4.jpg" alt="3"><br>还有一位演讲者摆出了一份属于他的答案，一份关于人工智能究竟应该干什么的答案。他认为真正理想的状态应该是人机结合共同实现工作。我十分认同他的观点。自人工智能的概念出现在我们的视野里，许多人开始讨论、开始担心：以后很多工作将会被人工智能所替代，被替代的人将何去何从？但是，我认为虽然科学的发展不应该受到人文道德的限制，但是技术的发展应该是以人为本的。人工智能的出现是为了使人们生活得更好，不是单纯的为了实现一种新的科学知识而去取代了人的位置。再者试想一下，当服务我们的对象是一个绝对冷静的机器，毫无人情化可言，那这个世界将会变得异常冰冷。只有当人的温暖和人工智能的算法分析有机结合才能使我们生活得更加美好，这才是以人为本技术发展。正如耶稣所言：上帝的归上帝，凯撒的归凯撒。人类主导辅以人工智能才是人工智能的正确发展方向。<br><img src="/2017/11/02/未来科技大会/5.jpg" alt="4"><br>人工智能介入我们的生活是一个不可避免的趋势，与其敬而远之，等待被淘汰。还不如主动过去接触掌握人工智能才能是我们未来的生活更加美好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天，我参加了全球未来科技大会的人工智能论坛。一开始，我对人工智能的概念只是一知半解。而且根本分不清什么是智能和自动化。&lt;br&gt;&lt;img src=&quot;/2017/11/02/未来科技大会/2.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;在这次论坛中提出了两个我认为比较对我来说比较新颖的
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>C语言快排</title>
    <link href="http://yoursite.com/2017/10/31/%E5%BF%AB%E6%8E%92-1/"/>
    <id>http://yoursite.com/2017/10/31/快排-1/</id>
    <published>2017-10-30T16:00:00.000Z</published>
    <updated>2017-12-11T14:44:40.641Z</updated>
    
    <content type="html"><![CDATA[<p>今天写了我的第一个快排（C）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;string.h&gt;</span></div><div class="line">int a[10000000];</div><div class="line">void quick(int start,int end);</div><div class="line">int getkey(int low,int high);</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int i,n;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(i=0·1;i&lt;n;i++)</div><div class="line">        scanf(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line"></div><div class="line">    quick(0,n-1);</div><div class="line">    <span class="keyword">for</span>(i=0;i&lt;n;i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</div><div class="line"></div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div><div class="line">void quick(int start,int end)</div><div class="line">&#123;</div><div class="line">    int lastkey;</div><div class="line">    <span class="keyword">if</span>(start&lt;end)</div><div class="line">    &#123;</div><div class="line">        lastkey=getkey(start,end);</div><div class="line">        quick(start,lastkey-1);</div><div class="line">        quick(lastkey+1,end);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">int getkey(int low,int high)</div><div class="line">&#123;</div><div class="line">    int key;</div><div class="line">    key=a[low];</div><div class="line">    <span class="keyword">while</span>(low&lt;high)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;a[high]&gt;=key)</div><div class="line">            high--;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(low&lt;high)</div><div class="line">            a[low++]=a[high];</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;a[low]&lt;=key)</div><div class="line">            low++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(low&lt;high)</div><div class="line">            a[high--]=a[low];</div><div class="line">    &#125;</div><div class="line">            a[low]=key;</div><div class="line">        <span class="built_in">return</span> low;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>##2017/11/1更<br>在昨天我了解到有快速排序后，我并不知道可以直接用<stdlib.h>中的函数实现，其中qsort中第一个变量是数组首地址，第二个变量是数组长度，第三个是各元素的占用空间大小（字节数），第四个变量是函数A的地址（函数名）。<br>函数a的作用是判断指针a与b所指向的值的大小，返回*a-*b的值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void qsort(void*base,size_t num,size_t width,int(__cdecl*compare)(const void*,const void*));</div></pre></td></tr></table></figure></stdlib.h></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int A(const void*a,const void*b)</div><div class="line">&#123;</div><div class="line"><span class="built_in">return</span> *(int*)a-*(int*)b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>###快速排序的主要思想是<br>在数组选出一个数key后，用key与其他数对比（大于key的放到一边，小于key的也放到一边）<br>然后再把key两边各视为一组重复以上过程直到每组长度为1。<br>以上步骤运行后可以保证“任一个数在数组中左边都比他大（小），反之亦然，从而实现排序。”</p><p>在上述代码中void quick();通过递归实现排序分组再排序的循环过程<br>而在int getkey(int low,int high);中的int getkey(); 实现把大于key的与小于key的数分成两部分并把排序后key的位置返回到int getkey();<br>以便于下一次分组。<br>getkey中一般取分组后的的首个元素作为key，防止交换元素交换位置后出现重复和缺失情况。<br><img src="/2017/10/31/快排-1/快排.jpg" alt="getkey视图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天写了我的第一个快排（C）&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;di
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/10/29/article-title/"/>
    <id>http://yoursite.com/2017/10/29/article-title/</id>
    <published>2017-10-29T00:31:03.984Z</published>
    <updated>2017-10-29T00:33:42.108Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: article title<br>date: 2017-10-29 08:31:03<br>tags:<br>—被缩进搞得心好累orz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: article title&lt;br&gt;date: 2017-10-29 08:31:03&lt;br&gt;tags:&lt;br&gt;—被缩进搞得心好累orz&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/29/hello-world/"/>
    <id>http://yoursite.com/2017/10/29/hello-world/</id>
    <published>2017-10-28T23:44:48.557Z</published>
    <updated>2017-10-31T12:19:02.534Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
